#include <windows.h>
#include <commctrl.h>

// Global variables
HINSTANCE hInst;
HWND hEmailEdit, hSendButton;
char recipientEmail[256] = {0};

// Improved typing function that handles special characters
void TypeText(const char *text) {
	int i;
    for( i = 0; text[i] != '\0'; i++) {
        SHORT key = VkKeyScanA(text[i]);
        BYTE vk = LOBYTE(key);
        BYTE shiftState = HIBYTE(key);
        
        if(shiftState & 1) {
            keybd_event(VK_SHIFT, 0, 0, 0);
        }
        
        keybd_event(vk, 0, 0, 0);
        keybd_event(vk, 0, KEYEVENTF_KEYUP, 0);
        
        if(shiftState & 1) {
            keybd_event(VK_SHIFT, 0, KEYEVENTF_KEYUP, 0);
        }
        
        Sleep(50);
    }
}

void MouseClick(int x, int y) {
    SetCursorPos(x, y);
    Sleep(500);
    mouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0);
    Sleep(100);
    mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
}

void SendEmailAutomation() {
    // Open Gmail in Chrome
    ShellExecute(NULL, "open", "chrome.exe", "https://mail.google.com", NULL, SW_SHOW);
    Sleep(10000); // Wait for Gmail to load
    
    // Click compose button (adjust coordinates for your screen)
    MouseClick(150, 150);
    Sleep(2000);
    
    // Type recipient
    TypeText(recipientEmail);
    Sleep(1000);
    
    // Press Enter to confirm recipient
    keybd_event(VK_RETURN, 0, 0, 0);
    keybd_event(VK_RETURN, 0, KEYEVENTF_KEYUP, 0);
    Sleep(1000);
    
    // Tab to subject field
    keybd_event(VK_TAB, 0, 0, 0);
    keybd_event(VK_TAB, 0, KEYEVENTF_KEYUP, 0);
    Sleep(500);
    
    // Type subject
    TypeText("Automated Email from C Program");
    Sleep(1000);
    
    // Tab to message body
    keybd_event(VK_TAB, 0, 0, 0);
    keybd_event(VK_TAB, 0, KEYEVENTF_KEYUP, 0);
    Sleep(500);
    
    // Type message
    TypeText("Hello,\n\nThis email was sent automatically by a C program.\n\nBest regards,\nAutomation Bot");
    Sleep(1000);
    
    // Send the email (Ctrl+Enter)
    keybd_event(VK_CONTROL, 0, 0, 0);
    keybd_event(VK_RETURN, 0, 0, 0);
    keybd_event(VK_RETURN, 0, KEYEVENTF_KEYUP, 0);
    keybd_event(VK_CONTROL, 0, KEYEVENTF_KEYUP, 0);
    
    MessageBox(NULL, "Email sent successfully!", "Success", MB_OK | MB_ICONINFORMATION);
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) {
    switch (message) {
        case WM_CREATE: {
            // Create email label
            CreateWindow("STATIC", "Recipient Email:", 
                         WS_VISIBLE | WS_CHILD,
                         50, 50, 120, 25, hWnd, NULL, hInst, NULL);
            
            // Create email edit box
            hEmailEdit = CreateWindow("EDIT", "", 
                                     WS_VISIBLE | WS_CHILD | WS_BORDER | ES_AUTOHSCROLL,
                                     180, 50, 300, 25, hWnd, NULL, hInst, NULL);
            
            // Create send button
            hSendButton = CreateWindow("BUTTON", "Send Email", 
                                       WS_VISIBLE | WS_CHILD | BS_DEFPUSHBUTTON,
                                       250, 100, 150, 40, hWnd, (HMENU)1, hInst, NULL);
            break;
        }
        case WM_COMMAND: {
            if (LOWORD(wParam) == 1) { // Send button clicked
                GetWindowText(hEmailEdit, recipientEmail, sizeof(recipientEmail));
                if (strlen(recipientEmail) > 0) {
                    SendEmailAutomation();
                } else {
                    MessageBox(hWnd, "Please enter a recipient email address", "Error", MB_OK | MB_ICONERROR);
                }
            }
            break;
        }
        case WM_DESTROY:
            PostQuitMessage(0);
            break;
        default:
            return DefWindowProc(hWnd, message, wParam, lParam);
    }
    return 0;
}

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {
    hInst = hInstance;
    
    // Register window class
    WNDCLASS wc = {0};
    wc.lpfnWndProc = WndProc;
    wc.hInstance = hInstance;
    wc.hbrBackground = (HBRUSH)(COLOR_WINDOW+1);
    wc.lpszClassName = "EmailAutomationClass";
    
    if (!RegisterClass(&wc)) {
        MessageBox(NULL, "Window Registration Failed!", "Error", MB_OK | MB_ICONERROR);
        return 0;
    }
    
    // Create window - now with maximize box and resizable
    HWND hWnd = CreateWindow("EmailAutomationClass", "Email Automation Tool",
                             WS_OVERLAPPEDWINDOW,
                             CW_USEDEFAULT, CW_USEDEFAULT, 600, 250,
                             NULL, NULL, hInstance, NULL);
    
    if (!hWnd) {
        MessageBox(NULL, "Window Creation Failed!", "Error", MB_OK | MB_ICONERROR);
        return 0;
    }
    
    // Show window maximized
    ShowWindow(hWnd, SW_MAXIMIZE);
    UpdateWindow(hWnd);
    
    // Message loop
    MSG msg;
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }
    
    return (int)msg.wParam;
}
